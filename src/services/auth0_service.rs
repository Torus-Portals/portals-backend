use reqwest;

use percent_encoding::{ utf8_percent_encode, NON_ALPHANUMERIC };

#[derive(Debug, Serialize, Deserialize)]
pub struct Auth0User {
  pub email_verified: bool,
  pub email: String,
  pub updated_at: String,
  pub user_id: String,
  pub name: String,
  pub picture: String,
  pub nickname: String,
  pub created_at: String,
  pub last_ip: String,
  pub last_login: String,
  pub logins_count: usize,
}

pub fn get_auth0_user(auth0id: &str) -> Result<Auth0User, reqwest::Error> {
  let auth0_path = String::from("https://torus-rocks.auth0.com/api/v2/users/");

  let url = format!("{}{}", auth0_path, utf8_percent_encode(&auth0id, NON_ALPHANUMERIC).to_string());

  // TODO: Figure out way to fetch new Bearer tokens.
  let auth0_user: Auth0User = reqwest::Client::new()
    .get(&url)
    .header("Authorization", "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlJqbEZOREJEUXpNNVJUSkNSRUV3T1RJeFFVWTJNRE5CTnpVMFJVRTFNRGt4TlRNNU5qQkdRZyJ9.eyJpc3MiOiJodHRwczovL3RvcnVzLXJvY2tzLmF1dGgwLmNvbS8iLCJzdWIiOiJVOGx6UHRhMXlxOUd3UjRDdWl1ejhoanlmRHhEaG0yTEBjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly90b3J1cy1yb2Nrcy5hdXRoMC5jb20vYXBpL3YyLyIsImlhdCI6MTU2ODM1MTY0NywiZXhwIjoxNTY4NDM4MDQ3LCJhenAiOiJVOGx6UHRhMXlxOUd3UjRDdWl1ejhoanlmRHhEaG0yTCIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6dXNlcnMgdXBkYXRlOnVzZXJzIGRlbGV0ZTp1c2VycyBjcmVhdGU6dXNlcnMgcmVhZDp1c2Vyc19hcHBfbWV0YWRhdGEgdXBkYXRlOnVzZXJzX2FwcF9tZXRhZGF0YSBkZWxldGU6dXNlcnNfYXBwX21ldGFkYXRhIGNyZWF0ZTp1c2Vyc19hcHBfbWV0YWRhdGEgY3JlYXRlOnVzZXJfdGlja2V0cyByZWFkOmNsaWVudHMgdXBkYXRlOmNsaWVudHMgZGVsZXRlOmNsaWVudHMgY3JlYXRlOmNsaWVudHMgcmVhZDpjbGllbnRfa2V5cyB1cGRhdGU6Y2xpZW50X2tleXMgZGVsZXRlOmNsaWVudF9rZXlzIGNyZWF0ZTpjbGllbnRfa2V5cyByZWFkOmNvbm5lY3Rpb25zIHVwZGF0ZTpjb25uZWN0aW9ucyBkZWxldGU6Y29ubmVjdGlvbnMgY3JlYXRlOmNvbm5lY3Rpb25zIHJlYWQ6cmVzb3VyY2Vfc2VydmVycyB1cGRhdGU6cmVzb3VyY2Vfc2VydmVycyBkZWxldGU6cmVzb3VyY2Vfc2VydmVycyBjcmVhdGU6cmVzb3VyY2Vfc2VydmVycyByZWFkOmRldmljZV9jcmVkZW50aWFscyB1cGRhdGU6ZGV2aWNlX2NyZWRlbnRpYWxzIGRlbGV0ZTpkZXZpY2VfY3JlZGVudGlhbHMgY3JlYXRlOmRldmljZV9jcmVkZW50aWFscyByZWFkOnJ1bGVzIHVwZGF0ZTpydWxlcyBkZWxldGU6cnVsZXMgY3JlYXRlOnJ1bGVzIHJlYWQ6cnVsZXNfY29uZmlncyB1cGRhdGU6cnVsZXNfY29uZmlncyBkZWxldGU6cnVsZXNfY29uZmlncyByZWFkOmVtYWlsX3Byb3ZpZGVyIHVwZGF0ZTplbWFpbF9wcm92aWRlciBkZWxldGU6ZW1haWxfcHJvdmlkZXIgY3JlYXRlOmVtYWlsX3Byb3ZpZGVyIGJsYWNrbGlzdDp0b2tlbnMgcmVhZDpzdGF0cyByZWFkOnRlbmFudF9zZXR0aW5ncyB1cGRhdGU6dGVuYW50X3NldHRpbmdzIHJlYWQ6bG9ncyByZWFkOnNoaWVsZHMgY3JlYXRlOnNoaWVsZHMgZGVsZXRlOnNoaWVsZHMgcmVhZDphbm9tYWx5X2Jsb2NrcyBkZWxldGU6YW5vbWFseV9ibG9ja3MgdXBkYXRlOnRyaWdnZXJzIHJlYWQ6dHJpZ2dlcnMgcmVhZDpncmFudHMgZGVsZXRlOmdyYW50cyByZWFkOmd1YXJkaWFuX2ZhY3RvcnMgdXBkYXRlOmd1YXJkaWFuX2ZhY3RvcnMgcmVhZDpndWFyZGlhbl9lbnJvbGxtZW50cyBkZWxldGU6Z3VhcmRpYW5fZW5yb2xsbWVudHMgY3JlYXRlOmd1YXJkaWFuX2Vucm9sbG1lbnRfdGlja2V0cyByZWFkOnVzZXJfaWRwX3Rva2VucyBjcmVhdGU6cGFzc3dvcmRzX2NoZWNraW5nX2pvYiBkZWxldGU6cGFzc3dvcmRzX2NoZWNraW5nX2pvYiByZWFkOmN1c3RvbV9kb21haW5zIGRlbGV0ZTpjdXN0b21fZG9tYWlucyBjcmVhdGU6Y3VzdG9tX2RvbWFpbnMgcmVhZDplbWFpbF90ZW1wbGF0ZXMgY3JlYXRlOmVtYWlsX3RlbXBsYXRlcyB1cGRhdGU6ZW1haWxfdGVtcGxhdGVzIHJlYWQ6bWZhX3BvbGljaWVzIHVwZGF0ZTptZmFfcG9saWNpZXMgcmVhZDpyb2xlcyBjcmVhdGU6cm9sZXMgZGVsZXRlOnJvbGVzIHVwZGF0ZTpyb2xlcyByZWFkOnByb21wdHMgdXBkYXRlOnByb21wdHMgcmVhZDpicmFuZGluZyB1cGRhdGU6YnJhbmRpbmciLCJndHkiOiJjbGllbnQtY3JlZGVudGlhbHMifQ.V7eAnjDbUX4jAtpgkwRGBrSKRyc3iCnzzjJbtoT8wHc3e5RlaoTI6l01_35Iq-NmxHNNJA1YuYBp9yhWpKykpxOu8BvZD-mB0kiAvTumqAH45sNXncKcuFnPtMGJz-ZAhZb1sd09dvvdDjg8k0gLw_XqdsdY0Zr7sZDp7EkWZS3FO2PTn_doYaxReqLWcUUH9gwBvHkZnDV12tzGVu3nB3V5bcfmqpYmioGyMjdCZRg47Pb4snHK77X9IPvlXv_E_RlnNiYc5VgIMfZwctU5cqD9PNe0fCnUykWkcHiOUMpg3YzQMuECIzbhk_FCmJ6cnunVEGb94UdlSQiDWGUnqg")
    .send()?
    .json()?;

  Ok(auth0_user)
}